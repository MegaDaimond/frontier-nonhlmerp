using Content.Client.UserInterface.Controls;
using Content.Shared.Speech;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Content.Shared._NewParadise.TTS;  // LOP edit

namespace Content.Client.VoiceMask;

[GenerateTypedNameReferences]
public sealed partial class VoiceMaskNameChangeWindow : FancyWindow
{
    public Action<string>? OnNameChange;
    public Action<string?>? OnVerbChange;

    // LOP edit start
    public Action<string?>? OnVoiceChange;
    private List<(string, string)> _voices = new();

    private string? _voice;
    // LOP edit end

    private List<(string, string)> _verbs = new();

    private string? _verb;

    public VoiceMaskNameChangeWindow()
    {
        RobustXamlLoader.Load(this);

        NameSelectorSet.OnPressed += _ =>
        {
            OnNameChange?.Invoke(NameSelector.Text);
        };

        SpeechVerbSelector.OnItemSelected += args =>
        {
            OnVerbChange?.Invoke((string?) args.Button.GetItemMetadata(args.Id));
            SpeechVerbSelector.SelectId(args.Id);
        };

        // LOP edit start
        SpeechVoiceSelector.OnItemSelected += args =>
        {
            OnVoiceChange?.Invoke((string?) args.Button.GetItemMetadata(args.Id));
            SpeechVoiceSelector.SelectId(args.Id);
        };
        // LOP edit end
    }

    public void ReloadVerbs(IPrototypeManager proto)
    {
        foreach (var verb in proto.EnumeratePrototypes<SpeechVerbPrototype>())
        {
            _verbs.Add((Loc.GetString(verb.Name), verb.ID));
        }
        _verbs.Sort((a, b) => a.Item1.CompareTo(b.Item1));
    }

    // LOP edit start
    public void ReloadVoices(IPrototypeManager proto)
    {
        foreach (var voice in proto.EnumeratePrototypes<TTSVoicePrototype>())
        {
            if (!voice.RoundStart)
                continue;
            _voices.Add((Loc.GetString(voice.Name), voice.ID));
        }
        _voices.Sort((a, b) => a.Item1.CompareTo(b.Item1));
    }

    public void AddVoices()
    {
        SpeechVoiceSelector.Clear();

        AddVoice(Loc.GetString("chat-speech-verb-name-none"), null);
        foreach (var (name, id) in _voices)
        {
            AddVoice(name, id);
        }
    }

    private void AddVoice(string name, string? voice)
    {
        var id = SpeechVoiceSelector.ItemCount;
        SpeechVoiceSelector.AddItem(name);
        if (voice is { } metadata)
            SpeechVoiceSelector.SetItemMetadata(id, metadata);

        if (voice == _voice)
            SpeechVoiceSelector.SelectId(id);
    }
    // LOP edit end

    public void AddVerbs()
    {
        SpeechVerbSelector.Clear();

        AddVerb(Loc.GetString("chat-speech-verb-name-none"), null);
        foreach (var (name, id) in _verbs)
        {
            AddVerb(name, id);
        }
    }

    private void AddVerb(string name, string? verb)
    {
        var id = SpeechVerbSelector.ItemCount;
        SpeechVerbSelector.AddItem(name);
        if (verb is { } metadata)
            SpeechVerbSelector.SetItemMetadata(id, metadata);

        if (verb == _verb)
            SpeechVerbSelector.SelectId(id);
    }

    public void UpdateState(string name, string? verb, string? voice)   // LOP edit
    {
        NameSelector.Text = name;
        _verb = verb;
        _voice = voice; // LOP edit

        for (int id = 0; id < SpeechVerbSelector.ItemCount; id++)
        {
            if (string.Equals(verb, SpeechVerbSelector.GetItemMetadata(id)))
            {
                SpeechVerbSelector.SelectId(id);
                break;
            }
        }

        // LOP edit start
        for (var id = 0; id < SpeechVoiceSelector.ItemCount; id++)
        {
            if (string.Equals(voice, SpeechVoiceSelector.GetItemMetadata(id)))
            {
                SpeechVoiceSelector.SelectId(id);
                break;
            }
        }
        // LOP edit end
    }
}
